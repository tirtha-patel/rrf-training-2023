filter(amenities == c("college", "school", "university")) %>%
group_by(ADM2_PC, amenities) %>%
mutate(edu_amenities = sum(value, na.rm = TRUE)) %>%
arrange(desc(edu_amenities))
highest_amenities_long <- infrastructure_long %>%
filter(OR(amenities == "college", amenities =="school", amenities =="university")) %>%
group_by(ADM2_PC, amenities) %>%
mutate(edu_amenities = sum(value, na.rm = TRUE)) %>%
arrange(desc(edu_amenities))
highest_amenities_long <- infrastructure_long %>%
filter(amenities == "college"| amenities =="school"| amenities =="university") %>%
group_by(ADM2_PC, amenities) %>%
mutate(edu_amenities = sum(value, na.rm = TRUE)) %>%
arrange(desc(edu_amenities))
highest_amenities_long <- infrastructure_long %>%
filter(amenities == "college"| amenities =="school"| amenities =="university") %>%
group_by(ADM2_PC) %>%
mutate(edu_amenities = sum(value, na.rm = TRUE)) %>%
arrange(desc(edu_amenities))
packages <- c("tidyr",
"dplyr",
"labelled",
"stringi",
"Hmisc")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
here()
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia connecivity decleaned.csv"))
# Set folder path to where you downloaded the data
tidy_folder <- here(data)
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia connecivity decleaned.csv"))
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia connecivity decleaned.csv"))
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia_connecivity_decleaned.csv"))
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia_connecivity_decleaned.csv"))
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia_connectivity_decleaned.csv"))
View(connectivity)
# Step 1: Remove duplicate entries
# Identify and remove duplicate rows in your data
connectivity_wide <- connectivity_wide %>%
distinct()
# Step 1: Remove duplicate entries
# Identify and remove duplicate rows in your data
connectivity <- connectivity %>%
distinct()
# Step 5: Drop data collection metadata variables not needed for analysis
# Remove unnecessary columns from your dataset
connectivity <- connectivity %>%
select(-id_test_data)
summary(connectivity)
length(unique(connectivity$quadkey))
length(unique(connectivity$ADM2_PC))
length(unique(connectivity$ADM2_ES))
length(unique(connectivity$quadkey))*2
# Step 3: Encode choice questions and ensure correct data types
# Check data types of different columns and modify them if necessary
str(connectivity)
length(unique(connectivity$quadkey))*2
unique(tests)
unique(connectivity$tests)
# Step 6: Ensure all variables have English names and no special characters
# Standardize the column names by removing special characters
connectivity <- connectivity %>%
mutate(ADM1_ES = stri_trans_general(ADM1_ES, "Latin-ASCII"),
ADM2_ES = stri_trans_general(ADM2_ES, "Latin-ASCII"))
connectivity <- connectivity %>%
select(-id_test_data)
# Step 4: Handle missing values
# Handle rows and columns with missing values in a way that suits your analysis
connectivity <- connectivity %>%
filter(!all(is.na(c(avg_d_kbps, avg_u_kbps, avg_lat_ms, tests, devices))))
# Step 4: Handle missing values
# Handle rows and columns with missing values in a way that suits your analysis
connectivity <- connectivity %>%
filter(!all(is.na(c(avg_d_kbps, avg_u_kbps, avg_lat_ms, tests, devices))))
# Step 4: Handle missing values
# Handle rows and columns with missing values in a way that suits your analysis
connectivity <- connectivity %>%
rowwise() %>%
filter(!all(is.na(c(avg_d_kbps, avg_u_kbps, avg_lat_ms, tests, devices))))
View(connectivity)
codebook(connectivity)
packages <- c("tidyr",
"dplyr",
"labelled",
"stringi",
"Hmisc",
"codebook")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
codebook(connectivity)
codebook(connectivity)
packages <- c("tidyr",
"dplyr",
"labelled",
"stringi",
"Hmisc",
"codebook",
"future")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
codebook(connectivity)
codebook(connectivity)
packages <- c("tidyr",
"dplyr",
"labelled",
"stringi",
"Hmisc",
"codebook")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
# Step 0: Read data
# Read the connectivity data from your CSV file
connectivity <- read.csv(file.path(tidy_folder,
"colombia_connectivity_decleaned.csv"))
# Step 1: Remove duplicate entries
# Identify and remove duplicate rows in your data
connectivity <- connectivity %>%
distinct()
summary(connectivity)
length(unique(connectivity$quadkey))*2 # each qua
length(unique(connectivity$ADM2_PC))
length(unique(connectivity$ADM2_ES))
# Step 3: Encode choice questions and ensure correct data types
# Check data types of different columns and modify them if necessary
str(connectivity)
# Step 4: Handle missing values
# Handle rows and columns with missing values in a way that suits your analysis
connectivity <- connectivity %>%
rowwise() %>%
filter(!all(is.na(c(avg_d_kbps, avg_u_kbps, avg_lat_ms, tests, devices))))
connectivity <- connectivity %>%
select(-id_test_data)
# Step 6: Ensure all variables have English names and no special characters
# Standardize the column names by removing special characters
connectivity <- connectivity %>%
mutate(ADM1_ES = stri_trans_general(ADM1_ES, "Latin-ASCII"),
ADM2_ES = stri_trans_general(ADM2_ES, "Latin-ASCII"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity,
labels = c("tiles", "country code", "country name", "state code", "state name", "municipality code", "municipality name", "connection", "quarter in the year", "average download speed", "average upload speed", "tests", "devices"))
# View the clean data
# Preview your cleaned data
codebook(connectivity_clean)
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity,
labels = c("tiles", "country code", "country name", "state code", "state name", "municipality code", "municipality name", "connection", "quarter in the year", "average download speed", "average upload speed", "tests", "devices"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity,
labels = c("tiles", "country code", "country name", "state code", "state name", "municipality code", "municipality name", "connection", "quarter in the year", "average download speed", "average upload speed", "average lat speed", "tests", "devices"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity_clean,
labels = c("tiles", "country code", "country name", "state code", "state name", "municipality code", "municipality name", "connection", "quarter in the year", "average download speed", "average upload speed", "average lat speed", "tests", "devices"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity_clean,
labels = c("tiles", "country code", "country name", "state code", "state name", "municipality code", "municipality name", "connection", "quarter in the year", "average download speed", "average upload speed", "average lat speed", "tests", "devices"))
View(connectivity)
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(connectivity,
labels = c("tiles",
"country code", "country name",
"state code", "state name",
"municipality code", "municipality name",
"connection",
"quarter in the year",
"average download speed", "average upload speed", "average lat speed",
"tests", "devices"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(quadkey = "tiles",
ADM0_PC = "country code",
ADM0_ES = "country name",
ADM1_PC = "state code",
ADM1_ES = "state name",
ADM2_PC = "municipality code",
ADM2_ES = "municipality name",
connection = "connection",
trimester = "quarter in the year",
avg_d_kbps = "average download speed",
avg_u_kbps = "average upload speed",
avg_lat_ms = "average lat speed",
tests = "tests",
devices = "devices"))
# Step 7: Adding variable labels
# Add descriptive labels to your variables with a maximum of 80 characters each
connectivity_clean <- connectivity %>%
set_variable_labels(quadkey = "tiles",
ADM0_PC = "country code",
ADM0_ES = "country name",
ADM1_PC = "state code",
ADM1_ES = "state name",
ADM2_PC = "municipality code",
ADM2_ES = "municipality name",
connection = "connection",
trimester = "quarter in the year",
avg_d_kbps = "average download speed",
avg_u_kbps = "average upload speed",
avg_lat_ms = "average lat speed",
tests = "tests",
devices = "devices")
View(connectivity_clean)
# View the clean data
# Preview your cleaned data
codebook(connectivity_clean)
# View the clean data
# Preview your cleaned data
codebook::codebook(connectivity_clean)
View(connectivity_clean)
# Step 3: Encode choice questions and ensure correct data types
# Check data types of different columns and modify them if necessary
str(connectivity)
str(connectivity)
packages <- c("tidyr",
"dplyr")
pacman::p_load(packages,
character.only = TRUE,
install = FALSE) # Change to TRUE to install the necessary packages
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
# from cleaned
colombia_connectivity_clean <- read.csv(file.path(tidy_folder,
"colombia_connectivity_cleaned.csv"))
# from tidying
colombia_infraestructure <- read.csv(file.path(tidy_folder,
"colombia_infrastructure_wide.csv"))
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
packages <- c("tidyr",
"dplyr",
"here")
pacman::p_load(packages,
character.only = TRUE,
install = FALSE)
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
# from cleaned
colombia_connectivity_clean <- read.csv(file.path(tidy_folder,
"colombia_connectivity_cleaned.csv"))
# from tidying
colombia_infraestructure <- read.csv(file.path(tidy_folder,
"colombia_infrastructure_wide.csv"))
View(colombia_connectivity_clean)
View(colombia_infraestructure)
View(colombia_connectivity_clean)
colombia_connectivity_clean <- colombia_connectivity_clean %>%
mutate(avg_d_mbps = avg_d_kbps/1000,
avg_u_mbps = avg_u_kbps/1000)
View(colombia_connectivity_clean)
# - Apply the function to your dataset
colombia_connectivity_clean %>% ggplot(aes(y = avg_d_mbps)) +
geom_boxplot()
packages <- c("tidyr",
"dplyr",
"here",
"ggplot")
pacman::p_load(packages,
character.only = TRUE,
install = FALSE)
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
# - Apply the function to your dataset
colombia_connectivity_clean %>% ggplot(aes(y = avg_d_mbps)) +
geom_boxplot()
pacman::p_load(packages,
character.only = TRUE,
install = TRUE)
packages <- c("tidyr",
"dplyr",
"ggplot2",
"corrplot",
"stargazer",
"gt",
"plm",
"lmtest")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE) # Change to TRUE to install the necessary packages
pacman::p_load(packages,
character.only = TRUE,
install = TRUE) # Change to TRUE to install the necessary packages
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
tidy_output <- here("outputs")
a
pacman::p_load(packages,
character.only = TRUE,
install = TRUE) # Change to TRUE to install the necessary packages
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
tidy_output <- here("outputs")
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
here()
packages <- c("here",
"tidyr",
"dplyr",
"ggplot2",
"corrplot",
"stargazer",
"gt",
"plm",
"lmtest")
pacman::p_load(packages,
character.only = TRUE,
install = TRUE) # Change to TRUE to install the necessary packages
# Set folder path to where you downloaded the data
tidy_folder <- here("data")
tidy_output <- here("outputs")
municipality_database <- read.csv(file.path(tidy_folder,
"municipality_database.csv"))
state_database <- read.csv(file.path(tidy_folder,
"state_database.csv"))
# -------------
# Task 1: Create Summary Statistics
# -------------
# In this task, generate summary statistics for both municipality and state databases.
# You can use summary() function, here is another more customized option.
summary_stats_municipality <- municipality_database %>%
# only numeric variables
summarise(across(avg_d_mbps_winsorized:avg_u_mbps_change, list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE),
cilower = ~quantile(.x, 0.025, na.rm = TRUE),
ciupper = ~quantile(.x, 0.975, na.rm = TRUE)))) %>%
pivot_longer(cols = everything(),
names_to = c("Statistic", "Variable"),
values_to = "value",
names_sep = "_(?=[^_]+$)") %>%
pivot_wider(names_from = Variable) %>%
rename(Mean = "mean", SD = "sd", `95% CI Lower` = "cilower", `95% CI Upper` = "ciupper")
# Task 1: Create Summary Statistics ------------------------
# For Municipality
# Note: Use dplyr functions such as summarise and across to calculate summary statistics like mean, sd, etc.
# ....
# Use gt package to create nice looking tables.
stargazer(municipality_database, type = "latex", title="Descriptive statistics", digits=1, out=file.path(tidy_output,"municipality_DS.tex"))
summary_stats_municipality %>%
gt() %>%
gtsave(file.path(tidy_output,"municipality_DS.html"))
# For State
# Note: Similarly, create summary statistics for the state database
summary_stats_state <- state_database %>%
# only numeric variables
summarise(across(avg_d_mbps_winsorized:avg_u_mbps_change, list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE),
cilower = ~quantile(.x, 0.025, na.rm = TRUE),
ciupper = ~quantile(.x, 0.975, na.rm = TRUE)))) %>%
pivot_longer(cols = everything(),
names_to = c("Statistic", "Variable"),
values_to = "value",
names_sep = "_(?=[^_]+$)") %>%
pivot_wider(names_from = Variable) %>%
rename(Mean = "mean", SD = "sd", `95% CI Lower` = "cilower", `95% CI Upper` = "ciupper")
stargazer(state_database, type = "latex", title="Descriptive statistics", digits=1, out=file.path(tidy_output,"state_DS.tex"))
summary_stats_state %>%
gt() %>%
gtsave(file.path(tidy_output,"state_DS.html"))
# Task 2: Visualization of Individual Variables ------------
# Histogram
# Note: Use ggplot2 package to create histograms. Use geom_histogram() function for histograms.
municipality_database %>% ggplot(aes(x = avg_u_mbps_winsorized)) +
geom_histogram()
ggsave(file.path(tidy_output,"avg_u_mbps_histogram.png"))
# Boxplot
# Note: Use geom_boxplot() function to create box plots.
municipality_database %>% ggplot(aes(y = avg_u_mbps_winsorized)) +
geom_boxplot() +
ylim(c(0,30)) +
facet_wrap(~trimester)
ggsave(file.path(tidy_output,"avg_u_mbps_boxplot.png"))
# Save the plots using ggsave()
# -------------
# Task 1: Create Summary Statistics
# -------------
# In this task, generate summary statistics for both municipality and state databases.
# You can use summary() function, here is another more customized option.
summary_stats_municipality <- municipality_database %>%
# only numeric variables
summarise(across(avg_d_mbps_winsorized:avg_u_mbps_change, list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE),
cilower = ~quantile(.x, 0.025, na.rm = TRUE),
ciupper = ~quantile(.x, 0.975, na.rm = TRUE)))) %>%
pivot_longer(cols = everything(),
names_to = c("Statistic", "Variable"),
values_to = "value",
names_sep = "_(?=[^_]+$)") %>%
pivot_wider(names_from = Variable) %>%
rename(Mean = "mean", SD = "sd", `95% CI Lower` = "cilower", `95% CI Upper` = "ciupper")
# Task 1: Create Summary Statistics ------------------------
# For Municipality
# Note: Use dplyr functions such as summarise and across to calculate summary statistics like mean, sd, etc.
# ....
# Use gt package to create nice looking tables.
stargazer(municipality_database, type = "latex", title="Descriptive statistics", digits=1, out=file.path(tidy_output,"municipality_DS.tex"))
summary_stats_municipality %>%
gt() %>%
gtsave(file.path(tidy_output,"municipality_DS.html"))
# For State
# Note: Similarly, create summary statistics for the state database
summary_stats_state <- state_database %>%
# only numeric variables
summarise(across(avg_d_mbps_winsorized:avg_u_mbps_change, list(mean = ~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE),
cilower = ~quantile(.x, 0.025, na.rm = TRUE),
ciupper = ~quantile(.x, 0.975, na.rm = TRUE)))) %>%
pivot_longer(cols = everything(),
names_to = c("Statistic", "Variable"),
values_to = "value",
names_sep = "_(?=[^_]+$)") %>%
pivot_wider(names_from = Variable) %>%
rename(Mean = "mean", SD = "sd", `95% CI Lower` = "cilower", `95% CI Upper` = "ciupper")
stargazer(state_database, type = "latex", title="Descriptive statistics", digits=1, out=file.path(tidy_output,"state_DS.tex"))
summary_stats_state %>%
gt() %>%
gtsave(file.path(tidy_output,"state_DS.html"))
# Task 2: Visualization of Individual Variables ------------
# Histogram
# Note: Use ggplot2 package to create histograms. Use geom_histogram() function for histograms.
municipality_database %>% ggplot(aes(x = avg_u_mbps_winsorized)) +
geom_histogram()
ggsave(file.path(tidy_output,"avg_u_mbps_histogram.png"))
municipality_database %>% ggplot(aes(x = avg_d_mbps_winsorized)) +
geom_histogram()
ggsave(file.path(tidy_output,"avg_d_mbps_histogram.png"))
# Boxplot
# Note: Use geom_boxplot() function to create box plots.
municipality_database %>% ggplot(aes(y = avg_u_mbps_winsorized)) +
geom_boxplot() +
ylim(c(0,30)) +
facet_wrap(~trimester)
ggsave(file.path(tidy_output,"avg_u_mbps_boxplot.png"))
municipality_database %>% ggplot(aes(y = avg_d_mbps_winsorized)) +
geom_boxplot() +
ylim(c(0,30)) +
facet_wrap(~trimester)
ggsave(file.path(tidy_output,"avg_d_mbps_boxplot.png"))
# ------------------------------------------------------------------------------
# Project: rrf-training-2023
# Purpose: Main Script
# Author: Tirtha Patel
# Date: 25th September, 2023
# ------------------------------------------------------------------------------
### Loading necessary libraries
install.packages("pacman")
library(pacman)
libraries <- c("here",
"renv")
pacman::p_load(libraries, character.only = TRUE, install = TRUE)
### Sourcing all scripts libraries
source(here("scripts", "Template-R-01-tidying-secondary.R"))
source(here("scripts", "Template-R-02-cleaning-secondary.R"))
source(here("scripts", "Template-R-03-construction-secondary.R"))
source(here("scripts", "Template-R-04-analysis-secondary.R"))
### Printing completion message
print("Data analysis is complete")
install.packages("pacman")
# ------------------------------------------------------------------------------
# Project: rrf-training-2023
# Purpose: Main Script
# Author: Tirtha Patel
# Date: 25th September, 2023
# ------------------------------------------------------------------------------
### Loading necessary libraries
install.packages("pacman")
library(pacman)
libraries <- c("here",
"renv")
pacman::p_load(libraries, character.only = TRUE, install = TRUE)
### Sourcing all scripts libraries
source(here("scripts", "Template-R-01-tidying-secondary.R"))
source(here("scripts", "Template-R-02-cleaning-secondary.R"))
source(here("scripts", "Template-R-03-construction-secondary.R"))
source(here("scripts", "Template-R-04-analysis-secondary.R"))
### Printing completion message
print("Data analysis is complete")
install.packages("pacman")
